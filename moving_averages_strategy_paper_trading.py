# -*- coding: utf-8 -*-
"""Moving Averages Strategy - Paper Trading.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SzWlV8D_1EUCxWtRiDhmxjvQNFV4XR3u
"""

import yfinance as yf
import ta
import pandas as pd
import numpy as np
import alpaca_trade_api as tradeapi
import requests

# Alpaca API setup
alpaca = tradeapi.REST('PKZENFCSVOZTZFIMB86R', 'vy7C2QRIed8a5eQ4UYI2q3oBhUfNaPKGOS6DKyfb', 'https://paper-api.alpaca.markets', api_version='v2')

# Returns S&P 500 Tech Stocks

def stockList():

  stockData = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
  names = stockData[0]
  table = {'Symbol': names['Symbol'], 'Industry': names['GICS Sector']}
  data = pd.DataFrame(table)
    
  return data

def currStock(ticker):
    
    tickerObj = yf.Ticker(ticker)
    data = tickerObj.history(period = "2mo")
  
    data['Prev. Close'] = 0.0
    index = 0
    for idx in data['Close']:
      if (index != 0):
        data['Prev. Close'][index] = data['Close'][index - 1]
      index += 1
    
    data['Ticker'] = ticker

    return data

def technicalIndicators(df):
    df['Short MA'] = ta.trend.ema_indicator(df.Close, window = 10)
    df['Medium MA'] = ta.trend.ema_indicator(df.Close, window = 21)
    df['Long MA'] = ta.trend.ema_indicator(df.Close, window = 30)

    df['MACD'] = ta.trend.macd(df.Close, window_slow=26, window_fast=12, fillna=True)
    df['RSI'] = ta.momentum.rsi(df.Close, window=14)
    df['PPO'] = ta.momentum.ppo(df.Close, window_slow=5, window_fast=30, window_sign=1, fillna=True)

    #Drops na values from rolling and window calculations
    df.dropna(inplace=True)
    
    return df

def decide(df):

  df['Buy'] = (df['Short MA'] > df['Long MA']) & ((df['Short MA'] > df['Medium MA']) & (df['Medium MA'] > df['Long MA']) & (df.RSI < 45))
  df['Sell'] = ((df['Short MA'] < df['Long MA']) & (df['Short MA'] <= df['Medium MA']) & (df.RSI > 55))

  # Check here so that if there is a buy signal, sell when the profit becomes 10%.

  # df['Short'] = (df['Short MA'] < df['Long MA'])
  df['Short'] = (df['Short MA'] < df['Long MA']) & ((df['Short MA'] < df['Medium MA']) & (df['Medium MA'] < df['Long MA']))
  df['ShortSell'] = (df['Short MA'] > df['Long MA']) & (df['Short MA'] >= df['Medium MA'])

  return df

def buyToday(df):
  if (not (df.empty)):
    if (df.tail(1).Buy.bool() != True):
      return False
    else:
      return True

def sellToday(df):
  if (not (df.empty)):
    if (df.tail(1).Sell.bool() != True):
      return False
    else:
      return True

def runEveryDay():
  stocks = stockList()

  # Selling
  positions = alpaca.list_positions()
  for stock in positions:
    data = currStock(stock.symbol)
    data = technicalIndicators(data)
    data = decide(data)
    result = sellToday(data)

    if (result == True):
      print("Sold: " + stock.symbol)
      alpaca.close_position(symbol = stock.symbol)      

  # Buying
  for ticker in stocks.Symbol:
    data = currStock(ticker)
    data = technicalIndicators(data)
    data = decide(data)     
    result = buyToday(data)

    if (result == True):
      print("Buy: " + ticker)
      alpaca.submit_order(symbol = ticker, notional = 10, side = 'buy', type = 'market', time_in_force='day')

runEveryDay()

